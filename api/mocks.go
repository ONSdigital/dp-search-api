// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"sync"
)

var (
	lockElasticSearcherMockMultiSearch sync.RWMutex
)

// Ensure, that ElasticSearcherMock does implement ElasticSearcher.
// If this is not the case, regenerate this file with moq.
var _ ElasticSearcher = &ElasticSearcherMock{}

// ElasticSearcherMock is a mock implementation of ElasticSearcher.
//
//     func TestSomethingThatUsesElasticSearcher(t *testing.T) {
//
//         // make and configure a mocked ElasticSearcher
//         mockedElasticSearcher := &ElasticSearcherMock{
//             MultiSearchFunc: func(index string, docType string, request []byte) ([]byte, error) {
// 	               panic("mock out the MultiSearch method")
//             },
//         }
//
//         // use mockedElasticSearcher in code that requires ElasticSearcher
//         // and then make assertions.
//
//     }
type ElasticSearcherMock struct {
	// MultiSearchFunc mocks the MultiSearch method.
	MultiSearchFunc func(index string, docType string, request []byte) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// MultiSearch holds details about calls to the MultiSearch method.
		MultiSearch []struct {
			// Index is the index argument value.
			Index string
			// DocType is the docType argument value.
			DocType string
			// Request is the request argument value.
			Request []byte
		}
	}
}

// MultiSearch calls MultiSearchFunc.
func (mock *ElasticSearcherMock) MultiSearch(index string, docType string, request []byte) ([]byte, error) {
	if mock.MultiSearchFunc == nil {
		panic("ElasticSearcherMock.MultiSearchFunc: method is nil but ElasticSearcher.MultiSearch was just called")
	}
	callInfo := struct {
		Index   string
		DocType string
		Request []byte
	}{
		Index:   index,
		DocType: docType,
		Request: request,
	}
	lockElasticSearcherMockMultiSearch.Lock()
	mock.calls.MultiSearch = append(mock.calls.MultiSearch, callInfo)
	lockElasticSearcherMockMultiSearch.Unlock()
	return mock.MultiSearchFunc(index, docType, request)
}

// MultiSearchCalls gets all the calls that were made to MultiSearch.
// Check the length with:
//     len(mockedElasticSearcher.MultiSearchCalls())
func (mock *ElasticSearcherMock) MultiSearchCalls() []struct {
	Index   string
	DocType string
	Request []byte
} {
	var calls []struct {
		Index   string
		DocType string
		Request []byte
	}
	lockElasticSearcherMockMultiSearch.RLock()
	calls = mock.calls.MultiSearch
	lockElasticSearcherMockMultiSearch.RUnlock()
	return calls
}
