// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/zebedee"
	"github.com/ONSdigital/dp-search-api/clients"
	"sync"
)

// Ensure, that ZebedeeClientMock does implement clients.ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ clients.ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of clients.ZebedeeClient.
//
//	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//		// make and configure a mocked clients.ZebedeeClient
//		mockedZebedeeClient := &ZebedeeClientMock{
//			GetPublishedDataFunc: func(ctx context.Context, uriString string) ([]byte, error) {
//				panic("mock out the GetPublishedData method")
//			},
//			GetPublishedIndexFunc: func(ctx context.Context, piRequest *zebedee.PublishedIndexRequestParams) (zebedee.PublishedIndex, error) {
//				panic("mock out the GetPublishedIndex method")
//			},
//		}
//
//		// use mockedZebedeeClient in code that requires clients.ZebedeeClient
//		// and then make assertions.
//
//	}
type ZebedeeClientMock struct {
	// GetPublishedDataFunc mocks the GetPublishedData method.
	GetPublishedDataFunc func(ctx context.Context, uriString string) ([]byte, error)

	// GetPublishedIndexFunc mocks the GetPublishedIndex method.
	GetPublishedIndexFunc func(ctx context.Context, piRequest *zebedee.PublishedIndexRequestParams) (zebedee.PublishedIndex, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPublishedData holds details about calls to the GetPublishedData method.
		GetPublishedData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UriString is the uriString argument value.
			UriString string
		}
		// GetPublishedIndex holds details about calls to the GetPublishedIndex method.
		GetPublishedIndex []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PiRequest is the piRequest argument value.
			PiRequest *zebedee.PublishedIndexRequestParams
		}
	}
	lockGetPublishedData  sync.RWMutex
	lockGetPublishedIndex sync.RWMutex
}

// GetPublishedData calls GetPublishedDataFunc.
func (mock *ZebedeeClientMock) GetPublishedData(ctx context.Context, uriString string) ([]byte, error) {
	if mock.GetPublishedDataFunc == nil {
		panic("ZebedeeClientMock.GetPublishedDataFunc: method is nil but ZebedeeClient.GetPublishedData was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UriString string
	}{
		Ctx:       ctx,
		UriString: uriString,
	}
	mock.lockGetPublishedData.Lock()
	mock.calls.GetPublishedData = append(mock.calls.GetPublishedData, callInfo)
	mock.lockGetPublishedData.Unlock()
	return mock.GetPublishedDataFunc(ctx, uriString)
}

// GetPublishedDataCalls gets all the calls that were made to GetPublishedData.
// Check the length with:
//
//	len(mockedZebedeeClient.GetPublishedDataCalls())
func (mock *ZebedeeClientMock) GetPublishedDataCalls() []struct {
	Ctx       context.Context
	UriString string
} {
	var calls []struct {
		Ctx       context.Context
		UriString string
	}
	mock.lockGetPublishedData.RLock()
	calls = mock.calls.GetPublishedData
	mock.lockGetPublishedData.RUnlock()
	return calls
}

// GetPublishedIndex calls GetPublishedIndexFunc.
func (mock *ZebedeeClientMock) GetPublishedIndex(ctx context.Context, piRequest *zebedee.PublishedIndexRequestParams) (zebedee.PublishedIndex, error) {
	if mock.GetPublishedIndexFunc == nil {
		panic("ZebedeeClientMock.GetPublishedIndexFunc: method is nil but ZebedeeClient.GetPublishedIndex was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PiRequest *zebedee.PublishedIndexRequestParams
	}{
		Ctx:       ctx,
		PiRequest: piRequest,
	}
	mock.lockGetPublishedIndex.Lock()
	mock.calls.GetPublishedIndex = append(mock.calls.GetPublishedIndex, callInfo)
	mock.lockGetPublishedIndex.Unlock()
	return mock.GetPublishedIndexFunc(ctx, piRequest)
}

// GetPublishedIndexCalls gets all the calls that were made to GetPublishedIndex.
// Check the length with:
//
//	len(mockedZebedeeClient.GetPublishedIndexCalls())
func (mock *ZebedeeClientMock) GetPublishedIndexCalls() []struct {
	Ctx       context.Context
	PiRequest *zebedee.PublishedIndexRequestParams
} {
	var calls []struct {
		Ctx       context.Context
		PiRequest *zebedee.PublishedIndexRequestParams
	}
	mock.lockGetPublishedIndex.RLock()
	calls = mock.calls.GetPublishedIndex
	mock.lockGetPublishedIndex.RUnlock()
	return calls
}
