// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	dpEsClient "github.com/ONSdigital/dp-elasticsearch/v3/client"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-search-api/clients"
	"github.com/elastic/go-elasticsearch/v7/esutil"
	"sync"
)

// Ensure, that ElasticSearchMock does implement clients.ElasticSearch.
// If this is not the case, regenerate this file with moq.
var _ clients.ElasticSearch = &ElasticSearchMock{}

// ElasticSearchMock is a mock implementation of clients.ElasticSearch.
//
//	func TestSomethingThatUsesElasticSearch(t *testing.T) {
//
//		// make and configure a mocked clients.ElasticSearch
//		mockedElasticSearch := &ElasticSearchMock{
//			AddDocumentFunc: func(ctx context.Context, indexName string, documentID string, document []byte, opts *dpEsClient.AddDocumentOptions) error {
//				panic("mock out the AddDocument method")
//			},
//			BulkIndexAddFunc: func(ctx context.Context, action dpEsClient.BulkIndexerAction, index string, documentID string, document []byte, onSuccess func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem), onFailure func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem, err error)) error {
//				panic("mock out the BulkIndexAdd method")
//			},
//			BulkIndexCloseFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the BulkIndexClose method")
//			},
//			BulkUpdateFunc: func(ctx context.Context, indexName string, url string, settings []byte) ([]byte, error) {
//				panic("mock out the BulkUpdate method")
//			},
//			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			CountFunc: func(ctx context.Context, count dpEsClient.Count) ([]byte, error) {
//				panic("mock out the Count method")
//			},
//			CountIndicesFunc: func(ctx context.Context, indices []string) ([]byte, error) {
//				panic("mock out the CountIndices method")
//			},
//			CreateIndexFunc: func(ctx context.Context, indexName string, indexSettings []byte) error {
//				panic("mock out the CreateIndex method")
//			},
//			DeleteDocumentFunc: func(ctx context.Context, indexName string, documentID string) error {
//				panic("mock out the DeleteDocument method")
//			},
//			DeleteDocumentByQueryFunc: func(ctx context.Context, search dpEsClient.Search) error {
//				panic("mock out the DeleteDocumentByQuery method")
//			},
//			DeleteIndexFunc: func(ctx context.Context, indexName string) error {
//				panic("mock out the DeleteIndex method")
//			},
//			DeleteIndicesFunc: func(ctx context.Context, indices []string) error {
//				panic("mock out the DeleteIndices method")
//			},
//			ExplainFunc: func(ctx context.Context, documentID string, search dpEsClient.Search) ([]byte, error) {
//				panic("mock out the Explain method")
//			},
//			GetAliasFunc: func(ctx context.Context) ([]byte, error) {
//				panic("mock out the GetAlias method")
//			},
//			GetIndicesFunc: func(ctx context.Context, indexPatterns []string) ([]byte, error) {
//				panic("mock out the GetIndices method")
//			},
//			MultiSearchFunc: func(ctx context.Context, searches []dpEsClient.Search, queryParams *dpEsClient.QueryParams) ([]byte, error) {
//				panic("mock out the MultiSearch method")
//			},
//			NewBulkIndexerFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the NewBulkIndexer method")
//			},
//			SearchFunc: func(ctx context.Context, search dpEsClient.Search) ([]byte, error) {
//				panic("mock out the Search method")
//			},
//			UpdateAliasesFunc: func(ctx context.Context, alias string, removeIndices []string, addIndices []string) error {
//				panic("mock out the UpdateAliases method")
//			},
//		}
//
//		// use mockedElasticSearch in code that requires clients.ElasticSearch
//		// and then make assertions.
//
//	}
type ElasticSearchMock struct {
	// AddDocumentFunc mocks the AddDocument method.
	AddDocumentFunc func(ctx context.Context, indexName string, documentID string, document []byte, opts *dpEsClient.AddDocumentOptions) error

	// BulkIndexAddFunc mocks the BulkIndexAdd method.
	BulkIndexAddFunc func(ctx context.Context, action dpEsClient.BulkIndexerAction, index string, documentID string, document []byte, onSuccess func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem), onFailure func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem, err error)) error

	// BulkIndexCloseFunc mocks the BulkIndexClose method.
	BulkIndexCloseFunc func(contextMoqParam context.Context) error

	// BulkUpdateFunc mocks the BulkUpdate method.
	BulkUpdateFunc func(ctx context.Context, indexName string, url string, settings []byte) ([]byte, error)

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CountFunc mocks the Count method.
	CountFunc func(ctx context.Context, count dpEsClient.Count) ([]byte, error)

	// CountIndicesFunc mocks the CountIndices method.
	CountIndicesFunc func(ctx context.Context, indices []string) ([]byte, error)

	// CreateIndexFunc mocks the CreateIndex method.
	CreateIndexFunc func(ctx context.Context, indexName string, indexSettings []byte) error

	// DeleteDocumentFunc mocks the DeleteDocument method.
	DeleteDocumentFunc func(ctx context.Context, indexName string, documentID string) error

	// DeleteDocumentByQueryFunc mocks the DeleteDocumentByQuery method.
	DeleteDocumentByQueryFunc func(ctx context.Context, search dpEsClient.Search) error

	// DeleteIndexFunc mocks the DeleteIndex method.
	DeleteIndexFunc func(ctx context.Context, indexName string) error

	// DeleteIndicesFunc mocks the DeleteIndices method.
	DeleteIndicesFunc func(ctx context.Context, indices []string) error

	// ExplainFunc mocks the Explain method.
	ExplainFunc func(ctx context.Context, documentID string, search dpEsClient.Search) ([]byte, error)

	// GetAliasFunc mocks the GetAlias method.
	GetAliasFunc func(ctx context.Context) ([]byte, error)

	// GetIndicesFunc mocks the GetIndices method.
	GetIndicesFunc func(ctx context.Context, indexPatterns []string) ([]byte, error)

	// MultiSearchFunc mocks the MultiSearch method.
	MultiSearchFunc func(ctx context.Context, searches []dpEsClient.Search, queryParams *dpEsClient.QueryParams) ([]byte, error)

	// NewBulkIndexerFunc mocks the NewBulkIndexer method.
	NewBulkIndexerFunc func(contextMoqParam context.Context) error

	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, search dpEsClient.Search) ([]byte, error)

	// UpdateAliasesFunc mocks the UpdateAliases method.
	UpdateAliasesFunc func(ctx context.Context, alias string, removeIndices []string, addIndices []string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddDocument holds details about calls to the AddDocument method.
		AddDocument []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IndexName is the indexName argument value.
			IndexName string
			// DocumentID is the documentID argument value.
			DocumentID string
			// Document is the document argument value.
			Document []byte
			// Opts is the opts argument value.
			Opts *dpEsClient.AddDocumentOptions
		}
		// BulkIndexAdd holds details about calls to the BulkIndexAdd method.
		BulkIndexAdd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Action is the action argument value.
			Action dpEsClient.BulkIndexerAction
			// Index is the index argument value.
			Index string
			// DocumentID is the documentID argument value.
			DocumentID string
			// Document is the document argument value.
			Document []byte
			// OnSuccess is the onSuccess argument value.
			OnSuccess func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem)
			// OnFailure is the onFailure argument value.
			OnFailure func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem, err error)
		}
		// BulkIndexClose holds details about calls to the BulkIndexClose method.
		BulkIndexClose []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// BulkUpdate holds details about calls to the BulkUpdate method.
		BulkUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IndexName is the indexName argument value.
			IndexName string
			// URL is the url argument value.
			URL string
			// Settings is the settings argument value.
			Settings []byte
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Count holds details about calls to the Count method.
		Count []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Count is the count argument value.
			Count dpEsClient.Count
		}
		// CountIndices holds details about calls to the CountIndices method.
		CountIndices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Indices is the indices argument value.
			Indices []string
		}
		// CreateIndex holds details about calls to the CreateIndex method.
		CreateIndex []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IndexName is the indexName argument value.
			IndexName string
			// IndexSettings is the indexSettings argument value.
			IndexSettings []byte
		}
		// DeleteDocument holds details about calls to the DeleteDocument method.
		DeleteDocument []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IndexName is the indexName argument value.
			IndexName string
			// DocumentID is the documentID argument value.
			DocumentID string
		}
		// DeleteDocumentByQuery holds details about calls to the DeleteDocumentByQuery method.
		DeleteDocumentByQuery []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Search is the search argument value.
			Search dpEsClient.Search
		}
		// DeleteIndex holds details about calls to the DeleteIndex method.
		DeleteIndex []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IndexName is the indexName argument value.
			IndexName string
		}
		// DeleteIndices holds details about calls to the DeleteIndices method.
		DeleteIndices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Indices is the indices argument value.
			Indices []string
		}
		// Explain holds details about calls to the Explain method.
		Explain []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DocumentID is the documentID argument value.
			DocumentID string
			// Search is the search argument value.
			Search dpEsClient.Search
		}
		// GetAlias holds details about calls to the GetAlias method.
		GetAlias []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetIndices holds details about calls to the GetIndices method.
		GetIndices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IndexPatterns is the indexPatterns argument value.
			IndexPatterns []string
		}
		// MultiSearch holds details about calls to the MultiSearch method.
		MultiSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Searches is the searches argument value.
			Searches []dpEsClient.Search
			// QueryParams is the queryParams argument value.
			QueryParams *dpEsClient.QueryParams
		}
		// NewBulkIndexer holds details about calls to the NewBulkIndexer method.
		NewBulkIndexer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Search is the search argument value.
			Search dpEsClient.Search
		}
		// UpdateAliases holds details about calls to the UpdateAliases method.
		UpdateAliases []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Alias is the alias argument value.
			Alias string
			// RemoveIndices is the removeIndices argument value.
			RemoveIndices []string
			// AddIndices is the addIndices argument value.
			AddIndices []string
		}
	}
	lockAddDocument           sync.RWMutex
	lockBulkIndexAdd          sync.RWMutex
	lockBulkIndexClose        sync.RWMutex
	lockBulkUpdate            sync.RWMutex
	lockChecker               sync.RWMutex
	lockCount                 sync.RWMutex
	lockCountIndices          sync.RWMutex
	lockCreateIndex           sync.RWMutex
	lockDeleteDocument        sync.RWMutex
	lockDeleteDocumentByQuery sync.RWMutex
	lockDeleteIndex           sync.RWMutex
	lockDeleteIndices         sync.RWMutex
	lockExplain               sync.RWMutex
	lockGetAlias              sync.RWMutex
	lockGetIndices            sync.RWMutex
	lockMultiSearch           sync.RWMutex
	lockNewBulkIndexer        sync.RWMutex
	lockSearch                sync.RWMutex
	lockUpdateAliases         sync.RWMutex
}

// AddDocument calls AddDocumentFunc.
func (mock *ElasticSearchMock) AddDocument(ctx context.Context, indexName string, documentID string, document []byte, opts *dpEsClient.AddDocumentOptions) error {
	if mock.AddDocumentFunc == nil {
		panic("ElasticSearchMock.AddDocumentFunc: method is nil but ElasticSearch.AddDocument was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		IndexName  string
		DocumentID string
		Document   []byte
		Opts       *dpEsClient.AddDocumentOptions
	}{
		Ctx:        ctx,
		IndexName:  indexName,
		DocumentID: documentID,
		Document:   document,
		Opts:       opts,
	}
	mock.lockAddDocument.Lock()
	mock.calls.AddDocument = append(mock.calls.AddDocument, callInfo)
	mock.lockAddDocument.Unlock()
	return mock.AddDocumentFunc(ctx, indexName, documentID, document, opts)
}

// AddDocumentCalls gets all the calls that were made to AddDocument.
// Check the length with:
//
//	len(mockedElasticSearch.AddDocumentCalls())
func (mock *ElasticSearchMock) AddDocumentCalls() []struct {
	Ctx        context.Context
	IndexName  string
	DocumentID string
	Document   []byte
	Opts       *dpEsClient.AddDocumentOptions
} {
	var calls []struct {
		Ctx        context.Context
		IndexName  string
		DocumentID string
		Document   []byte
		Opts       *dpEsClient.AddDocumentOptions
	}
	mock.lockAddDocument.RLock()
	calls = mock.calls.AddDocument
	mock.lockAddDocument.RUnlock()
	return calls
}

// BulkIndexAdd calls BulkIndexAddFunc.
func (mock *ElasticSearchMock) BulkIndexAdd(ctx context.Context, action dpEsClient.BulkIndexerAction, index string, documentID string, document []byte, onSuccess func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem), onFailure func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem, err error)) error {
	if mock.BulkIndexAddFunc == nil {
		panic("ElasticSearchMock.BulkIndexAddFunc: method is nil but ElasticSearch.BulkIndexAdd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Action     dpEsClient.BulkIndexerAction
		Index      string
		DocumentID string
		Document   []byte
		OnSuccess  func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem)
		OnFailure  func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem, err error)
	}{
		Ctx:        ctx,
		Action:     action,
		Index:      index,
		DocumentID: documentID,
		Document:   document,
		OnSuccess:  onSuccess,
		OnFailure:  onFailure,
	}
	mock.lockBulkIndexAdd.Lock()
	mock.calls.BulkIndexAdd = append(mock.calls.BulkIndexAdd, callInfo)
	mock.lockBulkIndexAdd.Unlock()
	return mock.BulkIndexAddFunc(ctx, action, index, documentID, document, onSuccess, onFailure)
}

// BulkIndexAddCalls gets all the calls that were made to BulkIndexAdd.
// Check the length with:
//
//	len(mockedElasticSearch.BulkIndexAddCalls())
func (mock *ElasticSearchMock) BulkIndexAddCalls() []struct {
	Ctx        context.Context
	Action     dpEsClient.BulkIndexerAction
	Index      string
	DocumentID string
	Document   []byte
	OnSuccess  func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem)
	OnFailure  func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem, err error)
} {
	var calls []struct {
		Ctx        context.Context
		Action     dpEsClient.BulkIndexerAction
		Index      string
		DocumentID string
		Document   []byte
		OnSuccess  func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem)
		OnFailure  func(ctx context.Context, item esutil.BulkIndexerItem, res esutil.BulkIndexerResponseItem, err error)
	}
	mock.lockBulkIndexAdd.RLock()
	calls = mock.calls.BulkIndexAdd
	mock.lockBulkIndexAdd.RUnlock()
	return calls
}

// BulkIndexClose calls BulkIndexCloseFunc.
func (mock *ElasticSearchMock) BulkIndexClose(contextMoqParam context.Context) error {
	if mock.BulkIndexCloseFunc == nil {
		panic("ElasticSearchMock.BulkIndexCloseFunc: method is nil but ElasticSearch.BulkIndexClose was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockBulkIndexClose.Lock()
	mock.calls.BulkIndexClose = append(mock.calls.BulkIndexClose, callInfo)
	mock.lockBulkIndexClose.Unlock()
	return mock.BulkIndexCloseFunc(contextMoqParam)
}

// BulkIndexCloseCalls gets all the calls that were made to BulkIndexClose.
// Check the length with:
//
//	len(mockedElasticSearch.BulkIndexCloseCalls())
func (mock *ElasticSearchMock) BulkIndexCloseCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockBulkIndexClose.RLock()
	calls = mock.calls.BulkIndexClose
	mock.lockBulkIndexClose.RUnlock()
	return calls
}

// BulkUpdate calls BulkUpdateFunc.
func (mock *ElasticSearchMock) BulkUpdate(ctx context.Context, indexName string, url string, settings []byte) ([]byte, error) {
	if mock.BulkUpdateFunc == nil {
		panic("ElasticSearchMock.BulkUpdateFunc: method is nil but ElasticSearch.BulkUpdate was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		IndexName string
		URL       string
		Settings  []byte
	}{
		Ctx:       ctx,
		IndexName: indexName,
		URL:       url,
		Settings:  settings,
	}
	mock.lockBulkUpdate.Lock()
	mock.calls.BulkUpdate = append(mock.calls.BulkUpdate, callInfo)
	mock.lockBulkUpdate.Unlock()
	return mock.BulkUpdateFunc(ctx, indexName, url, settings)
}

// BulkUpdateCalls gets all the calls that were made to BulkUpdate.
// Check the length with:
//
//	len(mockedElasticSearch.BulkUpdateCalls())
func (mock *ElasticSearchMock) BulkUpdateCalls() []struct {
	Ctx       context.Context
	IndexName string
	URL       string
	Settings  []byte
} {
	var calls []struct {
		Ctx       context.Context
		IndexName string
		URL       string
		Settings  []byte
	}
	mock.lockBulkUpdate.RLock()
	calls = mock.calls.BulkUpdate
	mock.lockBulkUpdate.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *ElasticSearchMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ElasticSearchMock.CheckerFunc: method is nil but ElasticSearch.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedElasticSearch.CheckerCalls())
func (mock *ElasticSearchMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Count calls CountFunc.
func (mock *ElasticSearchMock) Count(ctx context.Context, count dpEsClient.Count) ([]byte, error) {
	if mock.CountFunc == nil {
		panic("ElasticSearchMock.CountFunc: method is nil but ElasticSearch.Count was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Count dpEsClient.Count
	}{
		Ctx:   ctx,
		Count: count,
	}
	mock.lockCount.Lock()
	mock.calls.Count = append(mock.calls.Count, callInfo)
	mock.lockCount.Unlock()
	return mock.CountFunc(ctx, count)
}

// CountCalls gets all the calls that were made to Count.
// Check the length with:
//
//	len(mockedElasticSearch.CountCalls())
func (mock *ElasticSearchMock) CountCalls() []struct {
	Ctx   context.Context
	Count dpEsClient.Count
} {
	var calls []struct {
		Ctx   context.Context
		Count dpEsClient.Count
	}
	mock.lockCount.RLock()
	calls = mock.calls.Count
	mock.lockCount.RUnlock()
	return calls
}

// CountIndices calls CountIndicesFunc.
func (mock *ElasticSearchMock) CountIndices(ctx context.Context, indices []string) ([]byte, error) {
	if mock.CountIndicesFunc == nil {
		panic("ElasticSearchMock.CountIndicesFunc: method is nil but ElasticSearch.CountIndices was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Indices []string
	}{
		Ctx:     ctx,
		Indices: indices,
	}
	mock.lockCountIndices.Lock()
	mock.calls.CountIndices = append(mock.calls.CountIndices, callInfo)
	mock.lockCountIndices.Unlock()
	return mock.CountIndicesFunc(ctx, indices)
}

// CountIndicesCalls gets all the calls that were made to CountIndices.
// Check the length with:
//
//	len(mockedElasticSearch.CountIndicesCalls())
func (mock *ElasticSearchMock) CountIndicesCalls() []struct {
	Ctx     context.Context
	Indices []string
} {
	var calls []struct {
		Ctx     context.Context
		Indices []string
	}
	mock.lockCountIndices.RLock()
	calls = mock.calls.CountIndices
	mock.lockCountIndices.RUnlock()
	return calls
}

// CreateIndex calls CreateIndexFunc.
func (mock *ElasticSearchMock) CreateIndex(ctx context.Context, indexName string, indexSettings []byte) error {
	if mock.CreateIndexFunc == nil {
		panic("ElasticSearchMock.CreateIndexFunc: method is nil but ElasticSearch.CreateIndex was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		IndexName     string
		IndexSettings []byte
	}{
		Ctx:           ctx,
		IndexName:     indexName,
		IndexSettings: indexSettings,
	}
	mock.lockCreateIndex.Lock()
	mock.calls.CreateIndex = append(mock.calls.CreateIndex, callInfo)
	mock.lockCreateIndex.Unlock()
	return mock.CreateIndexFunc(ctx, indexName, indexSettings)
}

// CreateIndexCalls gets all the calls that were made to CreateIndex.
// Check the length with:
//
//	len(mockedElasticSearch.CreateIndexCalls())
func (mock *ElasticSearchMock) CreateIndexCalls() []struct {
	Ctx           context.Context
	IndexName     string
	IndexSettings []byte
} {
	var calls []struct {
		Ctx           context.Context
		IndexName     string
		IndexSettings []byte
	}
	mock.lockCreateIndex.RLock()
	calls = mock.calls.CreateIndex
	mock.lockCreateIndex.RUnlock()
	return calls
}

// DeleteDocument calls DeleteDocumentFunc.
func (mock *ElasticSearchMock) DeleteDocument(ctx context.Context, indexName string, documentID string) error {
	if mock.DeleteDocumentFunc == nil {
		panic("ElasticSearchMock.DeleteDocumentFunc: method is nil but ElasticSearch.DeleteDocument was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		IndexName  string
		DocumentID string
	}{
		Ctx:        ctx,
		IndexName:  indexName,
		DocumentID: documentID,
	}
	mock.lockDeleteDocument.Lock()
	mock.calls.DeleteDocument = append(mock.calls.DeleteDocument, callInfo)
	mock.lockDeleteDocument.Unlock()
	return mock.DeleteDocumentFunc(ctx, indexName, documentID)
}

// DeleteDocumentCalls gets all the calls that were made to DeleteDocument.
// Check the length with:
//
//	len(mockedElasticSearch.DeleteDocumentCalls())
func (mock *ElasticSearchMock) DeleteDocumentCalls() []struct {
	Ctx        context.Context
	IndexName  string
	DocumentID string
} {
	var calls []struct {
		Ctx        context.Context
		IndexName  string
		DocumentID string
	}
	mock.lockDeleteDocument.RLock()
	calls = mock.calls.DeleteDocument
	mock.lockDeleteDocument.RUnlock()
	return calls
}

// DeleteDocumentByQuery calls DeleteDocumentByQueryFunc.
func (mock *ElasticSearchMock) DeleteDocumentByQuery(ctx context.Context, search dpEsClient.Search) error {
	if mock.DeleteDocumentByQueryFunc == nil {
		panic("ElasticSearchMock.DeleteDocumentByQueryFunc: method is nil but ElasticSearch.DeleteDocumentByQuery was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Search dpEsClient.Search
	}{
		Ctx:    ctx,
		Search: search,
	}
	mock.lockDeleteDocumentByQuery.Lock()
	mock.calls.DeleteDocumentByQuery = append(mock.calls.DeleteDocumentByQuery, callInfo)
	mock.lockDeleteDocumentByQuery.Unlock()
	return mock.DeleteDocumentByQueryFunc(ctx, search)
}

// DeleteDocumentByQueryCalls gets all the calls that were made to DeleteDocumentByQuery.
// Check the length with:
//
//	len(mockedElasticSearch.DeleteDocumentByQueryCalls())
func (mock *ElasticSearchMock) DeleteDocumentByQueryCalls() []struct {
	Ctx    context.Context
	Search dpEsClient.Search
} {
	var calls []struct {
		Ctx    context.Context
		Search dpEsClient.Search
	}
	mock.lockDeleteDocumentByQuery.RLock()
	calls = mock.calls.DeleteDocumentByQuery
	mock.lockDeleteDocumentByQuery.RUnlock()
	return calls
}

// DeleteIndex calls DeleteIndexFunc.
func (mock *ElasticSearchMock) DeleteIndex(ctx context.Context, indexName string) error {
	if mock.DeleteIndexFunc == nil {
		panic("ElasticSearchMock.DeleteIndexFunc: method is nil but ElasticSearch.DeleteIndex was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		IndexName string
	}{
		Ctx:       ctx,
		IndexName: indexName,
	}
	mock.lockDeleteIndex.Lock()
	mock.calls.DeleteIndex = append(mock.calls.DeleteIndex, callInfo)
	mock.lockDeleteIndex.Unlock()
	return mock.DeleteIndexFunc(ctx, indexName)
}

// DeleteIndexCalls gets all the calls that were made to DeleteIndex.
// Check the length with:
//
//	len(mockedElasticSearch.DeleteIndexCalls())
func (mock *ElasticSearchMock) DeleteIndexCalls() []struct {
	Ctx       context.Context
	IndexName string
} {
	var calls []struct {
		Ctx       context.Context
		IndexName string
	}
	mock.lockDeleteIndex.RLock()
	calls = mock.calls.DeleteIndex
	mock.lockDeleteIndex.RUnlock()
	return calls
}

// DeleteIndices calls DeleteIndicesFunc.
func (mock *ElasticSearchMock) DeleteIndices(ctx context.Context, indices []string) error {
	if mock.DeleteIndicesFunc == nil {
		panic("ElasticSearchMock.DeleteIndicesFunc: method is nil but ElasticSearch.DeleteIndices was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Indices []string
	}{
		Ctx:     ctx,
		Indices: indices,
	}
	mock.lockDeleteIndices.Lock()
	mock.calls.DeleteIndices = append(mock.calls.DeleteIndices, callInfo)
	mock.lockDeleteIndices.Unlock()
	return mock.DeleteIndicesFunc(ctx, indices)
}

// DeleteIndicesCalls gets all the calls that were made to DeleteIndices.
// Check the length with:
//
//	len(mockedElasticSearch.DeleteIndicesCalls())
func (mock *ElasticSearchMock) DeleteIndicesCalls() []struct {
	Ctx     context.Context
	Indices []string
} {
	var calls []struct {
		Ctx     context.Context
		Indices []string
	}
	mock.lockDeleteIndices.RLock()
	calls = mock.calls.DeleteIndices
	mock.lockDeleteIndices.RUnlock()
	return calls
}

// Explain calls ExplainFunc.
func (mock *ElasticSearchMock) Explain(ctx context.Context, documentID string, search dpEsClient.Search) ([]byte, error) {
	if mock.ExplainFunc == nil {
		panic("ElasticSearchMock.ExplainFunc: method is nil but ElasticSearch.Explain was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		DocumentID string
		Search     dpEsClient.Search
	}{
		Ctx:        ctx,
		DocumentID: documentID,
		Search:     search,
	}
	mock.lockExplain.Lock()
	mock.calls.Explain = append(mock.calls.Explain, callInfo)
	mock.lockExplain.Unlock()
	return mock.ExplainFunc(ctx, documentID, search)
}

// ExplainCalls gets all the calls that were made to Explain.
// Check the length with:
//
//	len(mockedElasticSearch.ExplainCalls())
func (mock *ElasticSearchMock) ExplainCalls() []struct {
	Ctx        context.Context
	DocumentID string
	Search     dpEsClient.Search
} {
	var calls []struct {
		Ctx        context.Context
		DocumentID string
		Search     dpEsClient.Search
	}
	mock.lockExplain.RLock()
	calls = mock.calls.Explain
	mock.lockExplain.RUnlock()
	return calls
}

// GetAlias calls GetAliasFunc.
func (mock *ElasticSearchMock) GetAlias(ctx context.Context) ([]byte, error) {
	if mock.GetAliasFunc == nil {
		panic("ElasticSearchMock.GetAliasFunc: method is nil but ElasticSearch.GetAlias was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAlias.Lock()
	mock.calls.GetAlias = append(mock.calls.GetAlias, callInfo)
	mock.lockGetAlias.Unlock()
	return mock.GetAliasFunc(ctx)
}

// GetAliasCalls gets all the calls that were made to GetAlias.
// Check the length with:
//
//	len(mockedElasticSearch.GetAliasCalls())
func (mock *ElasticSearchMock) GetAliasCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAlias.RLock()
	calls = mock.calls.GetAlias
	mock.lockGetAlias.RUnlock()
	return calls
}

// GetIndices calls GetIndicesFunc.
func (mock *ElasticSearchMock) GetIndices(ctx context.Context, indexPatterns []string) ([]byte, error) {
	if mock.GetIndicesFunc == nil {
		panic("ElasticSearchMock.GetIndicesFunc: method is nil but ElasticSearch.GetIndices was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		IndexPatterns []string
	}{
		Ctx:           ctx,
		IndexPatterns: indexPatterns,
	}
	mock.lockGetIndices.Lock()
	mock.calls.GetIndices = append(mock.calls.GetIndices, callInfo)
	mock.lockGetIndices.Unlock()
	return mock.GetIndicesFunc(ctx, indexPatterns)
}

// GetIndicesCalls gets all the calls that were made to GetIndices.
// Check the length with:
//
//	len(mockedElasticSearch.GetIndicesCalls())
func (mock *ElasticSearchMock) GetIndicesCalls() []struct {
	Ctx           context.Context
	IndexPatterns []string
} {
	var calls []struct {
		Ctx           context.Context
		IndexPatterns []string
	}
	mock.lockGetIndices.RLock()
	calls = mock.calls.GetIndices
	mock.lockGetIndices.RUnlock()
	return calls
}

// MultiSearch calls MultiSearchFunc.
func (mock *ElasticSearchMock) MultiSearch(ctx context.Context, searches []dpEsClient.Search, queryParams *dpEsClient.QueryParams) ([]byte, error) {
	if mock.MultiSearchFunc == nil {
		panic("ElasticSearchMock.MultiSearchFunc: method is nil but ElasticSearch.MultiSearch was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Searches    []dpEsClient.Search
		QueryParams *dpEsClient.QueryParams
	}{
		Ctx:         ctx,
		Searches:    searches,
		QueryParams: queryParams,
	}
	mock.lockMultiSearch.Lock()
	mock.calls.MultiSearch = append(mock.calls.MultiSearch, callInfo)
	mock.lockMultiSearch.Unlock()
	return mock.MultiSearchFunc(ctx, searches, queryParams)
}

// MultiSearchCalls gets all the calls that were made to MultiSearch.
// Check the length with:
//
//	len(mockedElasticSearch.MultiSearchCalls())
func (mock *ElasticSearchMock) MultiSearchCalls() []struct {
	Ctx         context.Context
	Searches    []dpEsClient.Search
	QueryParams *dpEsClient.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		Searches    []dpEsClient.Search
		QueryParams *dpEsClient.QueryParams
	}
	mock.lockMultiSearch.RLock()
	calls = mock.calls.MultiSearch
	mock.lockMultiSearch.RUnlock()
	return calls
}

// NewBulkIndexer calls NewBulkIndexerFunc.
func (mock *ElasticSearchMock) NewBulkIndexer(contextMoqParam context.Context) error {
	if mock.NewBulkIndexerFunc == nil {
		panic("ElasticSearchMock.NewBulkIndexerFunc: method is nil but ElasticSearch.NewBulkIndexer was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockNewBulkIndexer.Lock()
	mock.calls.NewBulkIndexer = append(mock.calls.NewBulkIndexer, callInfo)
	mock.lockNewBulkIndexer.Unlock()
	return mock.NewBulkIndexerFunc(contextMoqParam)
}

// NewBulkIndexerCalls gets all the calls that were made to NewBulkIndexer.
// Check the length with:
//
//	len(mockedElasticSearch.NewBulkIndexerCalls())
func (mock *ElasticSearchMock) NewBulkIndexerCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockNewBulkIndexer.RLock()
	calls = mock.calls.NewBulkIndexer
	mock.lockNewBulkIndexer.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *ElasticSearchMock) Search(ctx context.Context, search dpEsClient.Search) ([]byte, error) {
	if mock.SearchFunc == nil {
		panic("ElasticSearchMock.SearchFunc: method is nil but ElasticSearch.Search was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Search dpEsClient.Search
	}{
		Ctx:    ctx,
		Search: search,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	return mock.SearchFunc(ctx, search)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//
//	len(mockedElasticSearch.SearchCalls())
func (mock *ElasticSearchMock) SearchCalls() []struct {
	Ctx    context.Context
	Search dpEsClient.Search
} {
	var calls []struct {
		Ctx    context.Context
		Search dpEsClient.Search
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}

// UpdateAliases calls UpdateAliasesFunc.
func (mock *ElasticSearchMock) UpdateAliases(ctx context.Context, alias string, removeIndices []string, addIndices []string) error {
	if mock.UpdateAliasesFunc == nil {
		panic("ElasticSearchMock.UpdateAliasesFunc: method is nil but ElasticSearch.UpdateAliases was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Alias         string
		RemoveIndices []string
		AddIndices    []string
	}{
		Ctx:           ctx,
		Alias:         alias,
		RemoveIndices: removeIndices,
		AddIndices:    addIndices,
	}
	mock.lockUpdateAliases.Lock()
	mock.calls.UpdateAliases = append(mock.calls.UpdateAliases, callInfo)
	mock.lockUpdateAliases.Unlock()
	return mock.UpdateAliasesFunc(ctx, alias, removeIndices, addIndices)
}

// UpdateAliasesCalls gets all the calls that were made to UpdateAliases.
// Check the length with:
//
//	len(mockedElasticSearch.UpdateAliasesCalls())
func (mock *ElasticSearchMock) UpdateAliasesCalls() []struct {
	Ctx           context.Context
	Alias         string
	RemoveIndices []string
	AddIndices    []string
} {
	var calls []struct {
		Ctx           context.Context
		Alias         string
		RemoveIndices []string
		AddIndices    []string
	}
	mock.lockUpdateAliases.RLock()
	calls = mock.calls.UpdateAliases
	mock.lockUpdateAliases.RUnlock()
	return calls
}
