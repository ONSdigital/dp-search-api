title Sitewide Search Pipeline - Part 3 Trigger Search Reindex Tracker

autonumber

entryspacing 1.0

database Kafka reindex requested
database Kafka reindex task counts
database Kafka search data imported

note over Kafka reindex requested: Message produced by an event\nfrom the Search Reindex API, see\n"Part 1 Trigger Search Reindex"

Kafka reindex requested-->Search Reindex Tracker: TCP: Consume Kafka message

Search Reindex Tracker->Search Reindex API: Http: Update job resource status\n         to in-progress

database Mongo DB
Search Reindex API->Mongo DB: TCP/IO socket: Update job document

note over Kafka reindex task counts: Message produced by an event\nfrom the Search Data Finder, see\n"Part 1 Trigger Search Reindex"

Kafka reindex task counts-->Search Reindex Tracker: TCP: Consume Kafka message

Search Reindex Tracker->Search Reindex API: Http: Create task resource

Search Reindex API->Mongo DB: TCP/IO socket: Insert Task document

Search Reindex Tracker->Search Reindex API: Http: Update job resource with\n        expected number of search\n        documents

Search Reindex API->Mongo DB: TCP/IO socket: Update job document

note over Kafka search data imported: Message produced by an event\nfrom the Search Data Importer, see\n"Part 2 Publish Search Data"

Kafka search data imported-->Search Reindex Tracker: TCP: Consume Kafka message

Search Reindex Tracker->Search Reindex API: Http: Get job resource to get current\n         total number of documents\n         inserted into Elasticsearch

Search Reindex API->Mongo DB: TCP/IO socket: Find job document

Search Reindex Tracker->Search Reindex API: Http: Update job with number of\n         inserted documents into\n         Elasticsearch

Search Reindex API->Mongo DB: TCP/IO socket: Update job document

note over Search Reindex API: If the total number of documents inserted\nequals the total number of documents expected\nthen next steps occur.

Search Reindex API->API Router: Http: Swap Aliases form old Elasticsearch (ES) index to new ES index

note over API Router: Reverse Proxies to Micro APIs\n - Authenticates the user or service\n - Audits request

API Router->Search API: Http: Swap Aliases over\n         to new ES index

database Elasticsearch
Search API->Elasticsearch: Http: Multisearch: query\n         - Swap over aliases\n         - Remove old index

Search Reindex API->Mongo DB: TCP/IO socket: Update job document\nstate set to completed
